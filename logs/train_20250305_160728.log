Starting train at Wed Mar  5 04:07:28 PM EST 2025
Using device: cuda
Fixed test set will be used from: splits/TCGA_BRCA/test.csv

==================================================
Split 0
==================================================
Training with data: splits/TCGA_BRCA/train0.csv
Validation with data: splits/TCGA_BRCA/val0.csv
Testing with data: splits/TCGA_BRCA/test.csv
Train: 434 samples, Val: 53 samples, Test: 169 samples
Feature type: patches, dimension: 768
Feature type: patches, dimension: 768
Feature type: patches, dimension: 768
Using device: cuda for training
/isilon/datalake/cialab/scratch/cialab/yxguo/projects/breast_cancer/VLM/record/breast_cancer_model.py:111: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  features = torch.load(path, map_location='cpu')
/isilon/datalake/cialab/scratch/cialab/yxguo/projects/breast_cancer/VLM/record/breast_cancer_model.py:111: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  features = torch.load(path, map_location='cpu')
/isilon/datalake/cialab/scratch/cialab/yxguo/projects/breast_cancer/VLM/record/breast_cancer_model.py:111: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  features = torch.load(path, map_location='cpu')
Traceback (most recent call last):
  File "main_experiment.py", line 401, in <module>
    run_experiment(args)
  File "main_experiment.py", line 145, in run_experiment
    metrics = train_and_evaluate_split(
  File "main_experiment.py", line 353, in train_and_evaluate_split
    trained_model, history = train_model(
  File "/isilon/datalake/cialab/scratch/cialab/yxguo/projects/breast_cancer/VLM/record/breast_cancer_model.py", line 495, in train_model
    for batch_idx, batch in enumerate(train_loader):
  File "/home/yoguo/.local/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 630, in __next__
    data = self._next_data()
  File "/home/yoguo/.local/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1344, in _next_data
    return self._process_data(data)
  File "/home/yoguo/.local/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1370, in _process_data
    data.reraise()
  File "/home/yoguo/.local/lib/python3.8/site-packages/torch/_utils.py", line 706, in reraise
    raise exception
RuntimeError: Caught RuntimeError in DataLoader worker process 0.
Original Traceback (most recent call last):
  File "/home/yoguo/.local/lib/python3.8/site-packages/torch/utils/data/_utils/worker.py", line 309, in _worker_loop
    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]
  File "/home/yoguo/.local/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 55, in fetch
    return self.collate_fn(data)
  File "/home/yoguo/.local/lib/python3.8/site-packages/torch/utils/data/_utils/collate.py", line 317, in default_collate
    return collate(batch, collate_fn_map=default_collate_fn_map)
  File "/home/yoguo/.local/lib/python3.8/site-packages/torch/utils/data/_utils/collate.py", line 155, in collate
    clone.update({key: collate([d[key] for d in batch], collate_fn_map=collate_fn_map) for key in elem})
  File "/home/yoguo/.local/lib/python3.8/site-packages/torch/utils/data/_utils/collate.py", line 155, in <dictcomp>
    clone.update({key: collate([d[key] for d in batch], collate_fn_map=collate_fn_map) for key in elem})
  File "/home/yoguo/.local/lib/python3.8/site-packages/torch/utils/data/_utils/collate.py", line 142, in collate
    return collate_fn_map[elem_type](batch, collate_fn_map=collate_fn_map)
  File "/home/yoguo/.local/lib/python3.8/site-packages/torch/utils/data/_utils/collate.py", line 214, in collate_tensor_fn
    return torch.stack(batch, 0, out=out)
RuntimeError: stack expects each tensor to be equal size, but got [1578, 768] at entry 0 and [1662, 768] at entry 1

Finished at Wed Mar  5 04:07:33 PM EST 2025
